// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TransformationsUI
import AVFoundation
import AVFoundation.AVUtilities
import Foundation
import MetalKit
import Swift
import TransformationsUIShared
import UIKit
public protocol ExtraModuleCommand : TransformationsUIShared.EditorModuleCommand {
}
public protocol CropModuleCommand : TransformationsUIShared.EditorModuleCommand {
}
extension StandardModules {
  @_hasMissingDesignatedInitializers public class Transform : TransformationsUIShared.EditorModule {
    final public let uuid: Foundation.UUID
    public var title: Swift.String
    public var icon: UIKit.UIImage?
    public var isEnabled: Swift.Bool
    final public let controllerType: TransformationsUIShared.EditorModuleController.Type
    final public let nodeCategory: TransformationsUIShared.RenderNodeCategory
    public var nodeType: TransformationsUIShared.RenderGroupChildNode.Type?
    public var autocreatesNode: Swift.Bool
    public var extraCommands: [TransformationsUI.ExtraModuleCommand]
    public var cropCommands: [TransformationsUI.CropModuleCommand]
    @objc deinit
  }
}
extension StandardModules.Transform {
  @_hasMissingDesignatedInitializers public class Commands {
    @_hasMissingDesignatedInitializers public class Rotate : TransformationsUIShared.PointerHashable, TransformationsUI.ExtraModuleCommand {
      final public let uuid: Foundation.UUID
      public var title: Swift.String
      public var icon: UIKit.UIImage? {
        get
        set
      }
      @objc deinit
      public var hashValue: Swift.Int {
        get
      }
    }
    public class Crop : TransformationsUIShared.PointerHashable, TransformationsUI.CropModuleCommand {
      final public let uuid: Foundation.UUID
      public var title: Swift.String {
        get
        set
      }
      public var icon: UIKit.UIImage? {
        get
        set
      }
      public enum CropType {
        case none
        case rect
        case circle
        public static func == (a: TransformationsUI.StandardModules.Transform.Commands.Crop.CropType, b: TransformationsUI.StandardModules.Transform.Commands.Crop.CropType) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
        public func hash(into hasher: inout Swift.Hasher)
      }
      public init(type: TransformationsUI.StandardModules.Transform.Commands.Crop.CropType = .rect, title: Swift.String? = nil, icon: UIKit.UIImage? = nil)
      @objc deinit
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
  }
}
public class StandardModules : TransformationsUIShared.EditorModules {
  public var all: [TransformationsUIShared.EditorModule] {
    get
    set
  }
  public var transform: TransformationsUI.StandardModules.Transform
  public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class Config : ObjectiveC.NSObject {
  final public let modules: TransformationsUIShared.EditorModules
  public init(modules: TransformationsUIShared.EditorModules = StandardModules())
  @objc deinit
}
public protocol TransformationsUIDelegate : AnyObject {
  func editorDismissed(with image: UIKit.UIImage?)
}
@objc @_inheritsConvenienceInitializers public class TransformationsUI : ObjectiveC.NSObject {
  weak public var delegate: TransformationsUI.TransformationsUIDelegate?
  final public let config: TransformationsUI.Config
  @objc override dynamic public init()
  public init(with config: TransformationsUI.Config)
  open func editor(with image: UIKit.UIImage) -> UIKit.UIViewController?
  @objc deinit
}
extension TransformationsUI.StandardModules.Transform.Commands.Crop.CropType : Swift.Equatable {}
extension TransformationsUI.StandardModules.Transform.Commands.Crop.CropType : Swift.Hashable {}
