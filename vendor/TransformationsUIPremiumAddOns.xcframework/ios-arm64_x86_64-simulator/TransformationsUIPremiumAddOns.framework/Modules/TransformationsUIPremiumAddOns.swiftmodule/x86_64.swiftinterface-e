// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TransformationsUIPremiumAddOns
import AVFoundation
import AVFoundation.AVUtilities
import CoreGraphics
import CoreImage
import Foundation
import Pikko
import Swift
import TransformationsUIShared
import UIKit
import UberSegmentedControl
public struct FontStyle : Swift.OptionSet {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let none: TransformationsUIPremiumAddOns.FontStyle
  public static let bold: TransformationsUIPremiumAddOns.FontStyle
  public static let italic: TransformationsUIPremiumAddOns.FontStyle
  public static let underline: TransformationsUIPremiumAddOns.FontStyle
  public typealias Element = TransformationsUIPremiumAddOns.FontStyle
  public typealias ArrayLiteralElement = TransformationsUIPremiumAddOns.FontStyle
  public typealias RawValue = Swift.UInt
}
extension PremiumModules {
  @objc @_inheritsConvenienceInitializers public class Border : ObjectiveC.NSObject, TransformationsUIShared.EditorModule {
    final public let uuid: Foundation.UUID
    public var title: Swift.String
    public var icon: UIKit.UIImage?
    public var isEnabled: Swift.Bool
    final public let controllerType: TransformationsUIShared.EditorModuleController.Type
    final public let nodeCategory: TransformationsUIShared.RenderNodeCategory
    public var nodeType: TransformationsUIShared.RenderGroupChildNode.Type?
    public var autocreatesNode: Swift.Bool
    public var commands: [TransformationsUIShared.EditorModuleCommand]
    public var defaultColor: UIKit.UIColor
    @objc @_inheritsConvenienceInitializers public class Commands : ObjectiveC.NSObject {
      @objc @_inheritsConvenienceInitializers public class Width : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand, TransformationsUIShared.BoundedRangeCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        final public let defaultValue: Swift.Double
        final public let range: (Swift.Range<Swift.Double>)
        final public let format: TransformationsUIShared.BoundedRangeFormat
        public var componentLabels: [Swift.String] {
          get
          set
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc @_inheritsConvenienceInitializers public class Transparency : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand, TransformationsUIShared.BoundedRangeCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        final public let defaultValue: Swift.Double
        final public let range: (Swift.Range<Swift.Double>)
        final public let format: TransformationsUIShared.BoundedRangeFormat
        public var componentLabels: [Swift.String] {
          get
          set
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc @_inheritsConvenienceInitializers public class Color : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc deinit
      @objc override dynamic public init()
    }
    @objc deinit
    @objc override dynamic public init()
  }
}
extension PremiumModules {
  @objc @_inheritsConvenienceInitializers public class Sticker : ObjectiveC.NSObject, TransformationsUIShared.EditorModule {
    final public let uuid: Foundation.UUID
    public var title: Swift.String
    public var icon: UIKit.UIImage?
    public var isEnabled: Swift.Bool
    final public let controllerType: TransformationsUIShared.EditorModuleController.Type
    final public let nodeCategory: TransformationsUIShared.RenderNodeCategory
    public var nodeType: TransformationsUIShared.RenderGroupChildNode.Type?
    public var autocreatesNode: Swift.Bool
    public var stickers: [Swift.String : [UIKit.UIImage]]
    @objc deinit
    @objc override dynamic public init()
  }
}
public protocol ExtraModuleCommand : TransformationsUIShared.EditorModuleCommand {
}
public protocol CropModuleCommand : TransformationsUIShared.EditorModuleCommand {
}
extension PremiumModules {
  @objc @_inheritsConvenienceInitializers public class Transform : ObjectiveC.NSObject, TransformationsUIShared.EditorModule {
    final public let uuid: Foundation.UUID
    public var title: Swift.String
    public var icon: UIKit.UIImage?
    public var isEnabled: Swift.Bool
    final public let controllerType: TransformationsUIShared.EditorModuleController.Type
    final public let nodeCategory: TransformationsUIShared.RenderNodeCategory
    public var nodeType: TransformationsUIShared.RenderGroupChildNode.Type?
    public var autocreatesNode: Swift.Bool
    public var extraCommands: [TransformationsUIPremiumAddOns.ExtraModuleCommand]
    public var cropCommands: [TransformationsUIPremiumAddOns.CropModuleCommand]
    @objc deinit
    @objc override dynamic public init()
  }
}
extension PremiumModules.Transform {
  @_hasMissingDesignatedInitializers public class Commands {
    @_hasMissingDesignatedInitializers public class Resize : TransformationsUIShared.PointerHashable, TransformationsUIPremiumAddOns.ExtraModuleCommand {
      final public let uuid: Foundation.UUID
      public var title: Swift.String {
        get
      }
      public var icon: UIKit.UIImage? {
        get
      }
      @objc deinit
      public var hashValue: Swift.Int {
        get
      }
    }
    @_hasMissingDesignatedInitializers public class Flip : TransformationsUIShared.PointerHashable, TransformationsUIPremiumAddOns.ExtraModuleCommand {
      final public let uuid: Foundation.UUID
      public var title: Swift.String {
        get
      }
      public var icon: UIKit.UIImage? {
        get
      }
      @objc deinit
      public var hashValue: Swift.Int {
        get
      }
    }
    @_hasMissingDesignatedInitializers public class Flop : TransformationsUIShared.PointerHashable, TransformationsUIPremiumAddOns.ExtraModuleCommand {
      final public let uuid: Foundation.UUID
      public var title: Swift.String {
        get
      }
      public var icon: UIKit.UIImage? {
        get
      }
      @objc deinit
      public var hashValue: Swift.Int {
        get
      }
    }
    public class Rotate : TransformationsUIShared.PointerHashable, TransformationsUIPremiumAddOns.ExtraModuleCommand {
      final public let uuid: Foundation.UUID
      public var title: Swift.String {
        get
      }
      public var icon: UIKit.UIImage? {
        get
      }
      final public let clockWise: Swift.Bool
      public init(clockWise: Swift.Bool = false)
      @objc deinit
      public var hashValue: Swift.Int {
        get
      }
    }
    public class Crop : TransformationsUIShared.PointerHashable, TransformationsUIPremiumAddOns.CropModuleCommand {
      final public let uuid: Foundation.UUID
      public var title: Swift.String {
        get
      }
      public var icon: UIKit.UIImage? {
        get
      }
      @frozen public enum CropType {
        case none
        case rect
        case circle
        public static func == (a: TransformationsUIPremiumAddOns.PremiumModules.Transform.Commands.Crop.CropType, b: TransformationsUIPremiumAddOns.PremiumModules.Transform.Commands.Crop.CropType) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
        public func hash(into hasher: inout Swift.Hasher)
      }
      @frozen public enum AspectRatio {
        case free
        case original
        case custom(_: CoreGraphics.CGSize)
      }
      public init(type: TransformationsUIPremiumAddOns.PremiumModules.Transform.Commands.Crop.CropType = .rect, aspectRatio: TransformationsUIPremiumAddOns.PremiumModules.Transform.Commands.Crop.AspectRatio = .free, title: Swift.String? = nil, icon: UIKit.UIImage? = nil)
      @objc deinit
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
  }
}
public protocol BorderToolbarDelegate : AnyObject {
  func borderToolbarWidthButtonTapped(_ toolbar: TransformationsUIPremiumAddOns.BorderToolbar)
  func borderToolbarTransparencyButtonTapped(_ toolbar: TransformationsUIPremiumAddOns.BorderToolbar)
  func borderToolbarColorButtonTapped(_ toolbar: TransformationsUIPremiumAddOns.BorderToolbar)
}
@_hasMissingDesignatedInitializers public class BorderToolbar : TransformationsUIShared.EditorToolbar {
  weak public var delegate: TransformationsUIPremiumAddOns.BorderToolbarDelegate?
  public var color: UIKit.UIColor? {
    get
    set
  }
  required public init(commands: [TransformationsUIShared.EditorModuleCommand], style: TransformationsUIShared.EditorToolbarStyle = .default)
  override public func setItems(_ items: [UIKit.UIView] = [], animated: Swift.Bool = false)
  @objc override dynamic public func layoutSubviews()
  override public init(style: TransformationsUIShared.EditorToolbarStyle = super)
  @objc deinit
}
extension BorderToolbar {
  public var selectedDescriptibleItem: TransformationsUIShared.DescriptibleEditorItem? {
    get
  }
}
extension PremiumModules {
  @objc @_inheritsConvenienceInitializers public class Adjustments : ObjectiveC.NSObject, TransformationsUIShared.EditorModule {
    final public let uuid: Foundation.UUID
    public var title: Swift.String
    public var icon: UIKit.UIImage?
    public var isEnabled: Swift.Bool
    final public let controllerType: TransformationsUIShared.EditorModuleController.Type
    final public let nodeCategory: TransformationsUIShared.RenderNodeCategory
    public var nodeType: TransformationsUIShared.RenderGroupChildNode.Type?
    public var autocreatesNode: Swift.Bool
    public var commands: [TransformationsUIShared.EditorModuleCommand]
    @objc @_inheritsConvenienceInitializers public class Commands : ObjectiveC.NSObject {
      @objc @_inheritsConvenienceInitializers public class Blur : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand, TransformationsUIShared.BoundedRangeCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        public var icon: UIKit.UIImage? {
          get
        }
        final public let defaultValue: Swift.Double
        final public let range: (Swift.Range<Swift.Double>)
        final public let format: TransformationsUIShared.BoundedRangeFormat
        public var componentLabels: [Swift.String] {
          get
          set
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc @_inheritsConvenienceInitializers public class Brightness : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand, TransformationsUIShared.BoundedRangeCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        public var icon: UIKit.UIImage? {
          get
        }
        final public let defaultValue: Swift.Double
        final public let range: (Swift.Range<Swift.Double>)
        final public let format: TransformationsUIShared.BoundedRangeFormat
        public var componentLabels: [Swift.String] {
          get
          set
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc @_inheritsConvenienceInitializers public class Contrast : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand, TransformationsUIShared.BoundedRangeCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        public var icon: UIKit.UIImage? {
          get
        }
        final public let defaultValue: Swift.Double
        final public let range: (Swift.Range<Swift.Double>)
        final public let format: TransformationsUIShared.BoundedRangeFormat
        public var componentLabels: [Swift.String] {
          get
          set
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc @_inheritsConvenienceInitializers public class Gamma : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand, TransformationsUIShared.BoundedRangeCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        public var icon: UIKit.UIImage? {
          get
        }
        final public let defaultValue: Swift.Double
        final public let range: (Swift.Range<Swift.Double>)
        final public let format: TransformationsUIShared.BoundedRangeFormat
        public var componentLabels: [Swift.String] {
          get
          set
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc @_inheritsConvenienceInitializers public class HueRotation : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand, TransformationsUIShared.BoundedRangeCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        public var icon: UIKit.UIImage? {
          get
        }
        final public let defaultValue: Swift.Double
        final public let range: (Swift.Range<Swift.Double>)
        final public let format: TransformationsUIShared.BoundedRangeFormat
        public var componentLabels: [Swift.String] {
          get
          set
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc deinit
      @objc override dynamic public init()
    }
    @objc deinit
    @objc override dynamic public init()
  }
}
public protocol TextToolbarDelegate : AnyObject {
  func textToolbarFontFamilyChanged(_ toolbar: TransformationsUIPremiumAddOns.TextToolbar)
  func textToolbarFontColorChanged(_ toolbar: TransformationsUIPremiumAddOns.TextToolbar)
  func textToolbarFontStyleChanged(_ toolbar: TransformationsUIPremiumAddOns.TextToolbar)
  func textToolbarTextAlignmentChanged(_ toolbar: TransformationsUIPremiumAddOns.TextToolbar)
}
public class TextToolbar : TransformationsUIShared.EditorToolbar {
  weak public var delegate: TransformationsUIPremiumAddOns.TextToolbarDelegate?
  override public var items: [UIKit.UIView] {
    get
  }
  public var fontFamily: Swift.String? {
    get
    set
  }
  public var fontColor: UIKit.UIColor? {
    get
    set
  }
  public var fontStyle: TransformationsUIPremiumAddOns.FontStyle? {
    get
    set
  }
  public var textAlignment: UIKit.NSTextAlignment? {
    get
    set
  }
  required public init(commandsInGroups: [[TransformationsUIShared.EditorModuleCommand]], style: TransformationsUIShared.EditorToolbarStyle = .default)
  @objc required dynamic public init(coder _: Foundation.NSCoder)
  override public func setItems(_ items: [UIKit.UIView] = [], animated: Swift.Bool = false)
  @objc override dynamic public func layoutSubviews()
  @objc deinit
  override public init(style: TransformationsUIShared.EditorToolbarStyle = super)
}
@objc public class PremiumModules : ObjectiveC.NSObject, TransformationsUIShared.EditorModules {
  public var all: [TransformationsUIShared.EditorModule] {
    get
    set
  }
  final public let transform: TransformationsUIPremiumAddOns.PremiumModules.Transform
  final public let filters: TransformationsUIPremiumAddOns.PremiumModules.Filters
  final public let adjustments: TransformationsUIPremiumAddOns.PremiumModules.Adjustments
  final public let text: TransformationsUIPremiumAddOns.PremiumModules.Text
  final public let sticker: TransformationsUIPremiumAddOns.PremiumModules.Sticker
  final public let border: TransformationsUIPremiumAddOns.PremiumModules.Border
  public init(apiKey: Swift.String) throws
  @objc deinit
  @objc override dynamic public init()
}
extension PremiumModules {
  public enum Error : Swift.Error {
    case custom(_: Swift.String)
  }
}
extension PremiumModules {
  @objc @_inheritsConvenienceInitializers public class Filters : ObjectiveC.NSObject, TransformationsUIShared.EditorModule {
    final public let uuid: Foundation.UUID
    public var title: Swift.String
    public var icon: UIKit.UIImage?
    public var isEnabled: Swift.Bool
    final public let controllerType: TransformationsUIShared.EditorModuleController.Type
    final public let nodeCategory: TransformationsUIShared.RenderNodeCategory
    public var nodeType: TransformationsUIShared.RenderGroupChildNode.Type?
    public var autocreatesNode: Swift.Bool
    public var commands: [TransformationsUIShared.EditorModuleCommand]
    @objc @_inheritsConvenienceInitializers public class Commands : ObjectiveC.NSObject {
      @objc public class Filter : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        public var icon: UIKit.UIImage? {
          get
        }
        @frozen public enum FilterType {
          case none
          case chrome
          case fade
          case instant
          case mono
          case noir
          case process
          case tonal
          case transfer
          public static func == (a: TransformationsUIPremiumAddOns.PremiumModules.Filters.Commands.Filter.FilterType, b: TransformationsUIPremiumAddOns.PremiumModules.Filters.Commands.Filter.FilterType) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
          public func hash(into hasher: inout Swift.Hasher)
        }
        public init(type: TransformationsUIPremiumAddOns.PremiumModules.Filters.Commands.Filter.FilterType = .none)
        @objc override dynamic public init()
        @objc deinit
      }
      @objc deinit
      @objc override dynamic public init()
    }
    @objc override dynamic public init()
    @objc deinit
  }
}
public enum RenderNodeTransform : TransformationsUIShared.RenderNodeChange {
  public enum CropType {
    case rect
    case circle
    public static func == (a: TransformationsUIPremiumAddOns.RenderNodeTransform.CropType, b: TransformationsUIPremiumAddOns.RenderNodeTransform.CropType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  case flip
  case flop
  case rotate(clockwise: Swift.Bool)
  case resize(ratio: CoreGraphics.CGSize)
  case crop(insets: UIKit.UIEdgeInsets, type: TransformationsUIPremiumAddOns.RenderNodeTransform.CropType)
}
extension PremiumModules {
  @objc @_inheritsConvenienceInitializers public class Text : ObjectiveC.NSObject, TransformationsUIShared.EditorModule {
    final public let uuid: Foundation.UUID
    public var title: Swift.String
    public var icon: UIKit.UIImage?
    public var isEnabled: Swift.Bool
    final public let controllerType: TransformationsUIShared.EditorModuleController.Type
    final public let nodeCategory: TransformationsUIShared.RenderNodeCategory
    public var nodeType: TransformationsUIShared.RenderGroupChildNode.Type?
    public var autocreatesNode: Swift.Bool
    public var availableFontFamilies: [Swift.String]
    public var defaultFontFamily: Swift.String
    public var defaultFontSize: CoreGraphics.CGFloat
    public var defaultFontColor: UIKit.UIColor
    public var defaultFontStyle: TransformationsUIPremiumAddOns.FontStyle
    public var defaultTextAlignment: UIKit.NSTextAlignment
    public var commandsInGroups: [[TransformationsUIShared.EditorModuleCommand]]
    @objc @_inheritsConvenienceInitializers public class Commands : ObjectiveC.NSObject {
      @objc @_inheritsConvenienceInitializers public class SelectFontFamily : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc @_inheritsConvenienceInitializers public class SelectFontColor : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc @_inheritsConvenienceInitializers public class SelectFontStyle : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc @_inheritsConvenienceInitializers public class SelectTextAlignment : ObjectiveC.NSObject, TransformationsUIShared.EditorModuleCommand {
        final public let uuid: Foundation.UUID
        public var title: Swift.String {
          get
        }
        @objc override dynamic public init()
        @objc deinit
      }
      @objc deinit
      @objc override dynamic public init()
    }
    @objc override dynamic public init()
    @objc deinit
  }
}
extension TransformationsUIPremiumAddOns.PremiumModules.Transform.Commands.Crop.CropType : Swift.Equatable {}
extension TransformationsUIPremiumAddOns.PremiumModules.Transform.Commands.Crop.CropType : Swift.Hashable {}
extension TransformationsUIPremiumAddOns.PremiumModules.Filters.Commands.Filter.FilterType : Swift.Equatable {}
extension TransformationsUIPremiumAddOns.PremiumModules.Filters.Commands.Filter.FilterType : Swift.Hashable {}
extension TransformationsUIPremiumAddOns.RenderNodeTransform.CropType : Swift.Equatable {}
extension TransformationsUIPremiumAddOns.RenderNodeTransform.CropType : Swift.Hashable {}
